plot(rnorm(100))
summary(cars)
cars[1:10,]
library(MixMAP)
library(MixMAP)
help(mixmapTest)
library(MixMAP)
#Load data
#This data has been prepared to be used as input to the MixMAP function
data(MixMAP_example)
#Run MixMAP
MixOut<-mixmapTest(MixMAP_example,pval="GC.Pvalue",snp="MarkerName",
chr="Chr",coord="Coordinate",gene="Gene")
#Display first ten detected genes
summary(MixOut)
#MixManhattan Plot
plot(MixOut)
help(mixmapPI)
library(MixMAP)
#Load data
#This data has been prepared to be used as input to the MixMAP function
data(MixMAP_example)
#Run MixMAP
MixOut<-mixmapPI(MixMAP_example,pval="GC.Pvalue",snp="MarkerName",
chr="Chr",coord="Coordinate",gene="Gene")
#Display first ten detected genes
summary(MixOut)
#MixManhattan Plot
plot(MixOut)
mixmapPI
library(MixMAP)
library(MixMAP)
#Load data
#This data has been prepared to be used as input to the MixMAP function
data(MixMAP_example)
#Run MixMAP
MixOut<-mixmapPI(MixMAP_example,pval="GC.Pvalue",snp="MarkerName",
chr="Chr",coord="Coordinate",gene="Gene")
#Display first ten detected genes
summary(MixOut)
#MixManhattan Plot
plot(MixOut)
data.set<-MixMAP_example
pval="pval"
pval="GC.Pvalue"
snp="MarkerName"
chr="Chr"
coord="Coordinate"
gene="Gene"
if (!pval%in%names(data.set)) stop(gettextf(paste0('Variable "',pval,'" not found in input data.frame.  Please specify variable name for p-values')))
#snp
if (!snp%in%names(data.set)) stop(gettextf(paste0('Variable "',snp,'" not found in input data.frame.  Please specify variable name for SNPs.')))
#basepair
if (!coord%in%names(data.set)) stop(gettextf(paste0('Variable "',coord,'" not found in input data.frame.  Please specify variable name for coordinate location.')))
#chromosome
if (!chr%in%names(data.set)) stop(gettextf(paste0('Variable "',chr,'" not found in input data.frame.  Please specify variable name for chromosome')))
#gene
if (!gene%in%names(data.set)) stop(gettextf(paste0('Variable "',gene,'" not found in input data.frame.  Please specify variable name for genes.')))
#Lengths of input must be the same
if (pval%in%names(data.set) & length(data.set[[pval]])!=length(data.set[[gene]])) stop(gettextf(paste('Lengths differ: Length of pval is ',length(data.set[[pval]]),'; Length of gene is ',length(data.set[[gene]]),sep="")))
############################
#Warnings
############################
#are pvalues numeric?
if (!is.numeric(data.set[[pval]])) stop(gettextf('p-values must be numeric'))
if (sum(is.na(data.set[[pval]]))>0) stop(gettextf('Some p-values are missing'))
if (sum(is.na(data.set[[gene]]))>0) stop(gettextf('Some gene names are missing'))
############################
#Pull out the subset of data that will be used
############################
#Pull out the data that we need from the bigger data file
datTemp<-data.frame(pvalTemp=data.set[[pval]],geneTemp=as.character(data.set[[gene]]),snpTemp=as.character(data.set[[snp]]))
fret<-datTemp[datTemp$geneTemp!="",]
#How many SNPs per gene?
tab<-data.frame(table(datTemp$geneTemp))
names(tab)<-c("gene","snpCount")
#Inverse normal transformation of the p-values after ranking
datTemp$probit.rank.transform<-qnorm((rank(datTemp$pvalTemp)-0.5)/length(datTemp$pvalTemp))
#Run lmer function
fm.rawg=lmer(probit.rank.transform ~ 1+(1|geneTemp),data=datTemp)
aa=ranef(fm.rawg)
beta<-fixef(fm.rawg)
post.est=aa$geneTemp[,1,]
post.var=attr(aa$gene.temp,"postVar")[1,1,]
n.i<-as.vector(table(datTemp$geneTemp))
sigma.sq.b<-VarCorr(fm.rawg)$geneTemp[1,1]
sigma.sq<-(attr(VarCorr(fm.rawg),"sc"))^2
#lambda<-sigma.sq.b/(sigma.sq.b+sigma.sq/n.i)
var.out<-post.var
############################################################
##Calculate the prediction interval
pred.upper<-post.est+sqrt(post.var)*qnorm(1-alpha/(length(post.est)))##Bonferroni correction
############################################################
############################
post.var
post.var=attr(aa$gene.temp,"postVar")[1,1,]
post.var
aa$gene.temp
aa
str(aa)
help(lme4)
methods(class="merMod")
ranef(aa)
str(aa)
class(aa)
help(ranef.mer)
str(fm.rawg)
attributes(MixOut)$lmer.out
attributes(MixOut)$num.genes.detected
help(mixmapPI)
library(MixMAP)
#Load data
#This data has been prepared to be used as input to the MixMAP function
data(MixMAP_example)
#Run MixMAP
MixOut<-mixmapPI(MixMAP_example,pval="GC.Pvalue",snp="MarkerName",
chr="Chr",coord="Coordinate",gene="Gene")
#Display first ten detected genes
summary(MixOut)
#MixManhattan Plot
plot(MixOut)
help(mixmapPI)
library(MixMAP)
library(MixMAP)
#Load data
#This data has been prepared to be used as input to the MixMAP function
data(MixMAP_example)
#Run MixMAP
MixOut<-mixmapPI(MixMAP_example,pval="GC.Pvalue",snp="MarkerName",
chr="Chr",coord="Coordinate",gene="Gene")
#Display first ten detected genes
summary(MixOut)
#MixManhattan Plot
plot(MixOut)
ranef(MixOur)
ranef(MixOut)
MixOut
ranef(MixOut@lme.out)
str(MixOut)
ranef(MixOut@lmer.out)
ranef(MixOut@lmer.out,postVar=TRUE)
ranef(MixOut@lmer.out,condVar=TRUE)
ranef(MixOut@lmer.out,condVar=TRUE)[1:10,]
greg<-ranef(MixOut@lmer.out,condVar=TRUE)
str(greg)
greg[[1]]
greg[[1]][1:10,]
str(greg[[1]])
aa=ranef(fm.rawg,condVar=TRUE)
beta<-fixef(fm.rawg)
post.est=aa$geneTemp[,1,]
post.var=attr(aa$gene.temp,"postVar")[1,1,]
n.i<-as.vector(table(datTemp$geneTemp))
sigma.sq.b<-VarCorr(fm.rawg)$geneTemp[1,1]
sigma.sq<-(attr(VarCorr(fm.rawg),"sc"))^2
#lambda<-sigma.sq.b/(sigma.sq.b+sigma.sq/n.i)
var.out<-post.var
############################################################
##Calculate the prediction interval
pred.upper<-post.est+sqrt(post.var)*qnorm(1-alpha/(length(post.est)))##Bonferroni correction
aa$gene.temp
aa
post.var=attr(aa,"postVar")[1,1,]
post.var
aa
str(aa)
post.var=attr(aa,"postVar")
post.var
attr(aa,"postVar")
attr(aa[[1]],"postVar")
attr(aa[[1]],"postVar")[1,]
attr(aa[[1]],"postVar")[1,,]
attr(aa[[1]],"postVar")[,1,]
attr(aa[[1]],"postVar")[1,,]
attr(aa[[1]],"postVar")[,,]
attr(aa[[1]],"postVar")
attr(aa[[1]],"postVar")[1]
aa[[1]][1]
str(aa[[1]])
attr(aa[[1]],"postVar")[1,]
summsry(attr(aa[[1]],"postVar")[1,,])
summary(attr(aa[[1]],"postVar")[1,,])
post.var=attr(aa[[1]],"postVar")[1,,]
n.i<-as.vector(table(datTemp$geneTemp))
sigma.sq.b<-VarCorr(fm.rawg)$geneTemp[1,1]
sigma.sq<-(attr(VarCorr(fm.rawg),"sc"))^2
#lambda<-sigma.sq.b/(sigma.sq.b+sigma.sq/n.i)
var.out<-post.var
############################################################
##Calculate the prediction interval
pred.upper<-post.est+sqrt(post.var)*qnorm(1-alpha/(length(post.est)))##Bonferroni correction
alpha=0.05
pred.upper<-post.est+sqrt(post.var)*qnorm(1-alpha/(length(post.est)))##Bonferroni correction
library(MixMAP)
help(MixMAP)
help(mixmapPI)
library(MixMAP)
#Load data
#This data has been prepared to be used as input to the MixMAP function
data(MixMAP_example)
#Run MixMAP
MixOut<-mixmapPI(MixMAP_example,pval="GC.Pvalue",snp="MarkerName",
chr="Chr",coord="Coordinate",gene="Gene")
#Display first ten detected genes
summary(MixOut)
#MixManhattan Plot
plot(MixOut)
library(MixMAP)
library(MixMAP)
library(MixMAP)
MIixMAP_example
MixMAP_example
data(MixMAP_example)
MixMAP_example[1:10,]
mixmapPI
MixOut <- mixmapPI(MixMAP_example, pval="GC.Pvalue", snp="MarkerName",
chr="Chr", coord="Coordinate", gene="Gene")
attributes(MixOut)$output[1:10,]
attributes(MixOut)$output[1:10,8:9]
MixOut@num.genes.detected
MixOut@num.genes.detected
MixOutTest<-mixmapTest(MixMAP_example)
mixmapTest
help(mixmapTest)
library(MixMAP)
#Load data
#This data has been prepared to be used as input to the MixMAP function
data(MixMAP_example)
#Run MixMAP
MixOut<-mixmapTest(MixMAP_example,pval="GC.Pvalue",snp="MarkerName",
chr="Chr",coord="Coordinate",gene="Gene")
#Display first ten detected genes
summary(MixOut)
#MixManhattan Plot
plot(MixOut)
help(mixmapPI)
library(MixMAP)
#Load data
#This data has been prepared to be used as input to the MixMAP function
data(MixMAP_example)
#Run MixMAP
MixOut<-mixmapPI(MixMAP_example,pval="GC.Pvalue",snp="MarkerName",
chr="Chr",coord="Coordinate",gene="Gene")
#Display first ten detected genes
summary(MixOut)
#MixManhattan Plot
plot(MixOut)
class(MixOut)
summary(MixOut)
summary(MixOut)
5000*(1.03)^20
(1.03)^20
1.03^30
1.05^30
55000/52
55000/12
4583*8
65000/12
5416*4
21664+36664
21664+36664
55000/12
42000/12
4583-3500
21664+36664+4000
21664+36664+4000+3000
21664+36664+4000+3000+4500
21664+36664+4000+3000+4500+10000
21664+36664+4000+3000+4500+10000+3000
