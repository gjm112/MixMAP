{
    "contents" : "\nMixMAP <-\nfunction(data.set,pval=\"pval\",snp=\"snp\",gene=\"gene\",coord=\"coord\",chr=\"chr\",alpha=0.05){\n############################\n#defining errors\n############################\n#names must be specified\n#p-values\nif (!pval%in%names(data.set)) stop(gettextf(paste0('Variable \"',pval,'\" not found in input data.frame.  Please specify variable name for p-values')))\n#snp\nif (!snp%in%names(data.set)) stop(gettextf(paste0('Variable \"',snp,'\" not found in input data.frame.  Please specify variable name for SNPs.')))\n#basepair\nif (!coord%in%names(data.set)) stop(gettextf(paste0('Variable \"',coord,'\" not found in input data.frame.  Please specify variable name for coordinate location.')))\n#chromosome\nif (!chr%in%names(data.set)) stop(gettextf(paste0('Variable \"',chr,'\" not found in input data.frame.  Please specify variable name for chromosome')))\n#gene\nif (!gene%in%names(data.set)) stop(gettextf(paste0('Variable \"',gene,'\" not found in input data.frame.  Please specify variable name for genes.')))\n\n#Lengths of input must be the same\nif (pval%in%names(data.set) & length(data.set[[pval]])!=length(data.set[[gene]])) stop(gettextf(paste('Lengths differ: Length of pval is ',length(data.set[[pval]]),'; Length of gene is ',length(data.set[[gene]]),sep=\"\")))\n\n############################\n#Warnings\n############################\n#are pvalues numeric?\nif (!is.numeric(data.set[[pval]])) stop(gettextf('p-values must be numeric'))\nif (sum(is.na(data.set[[pval]]))>0) stop(gettextf('Some p-values are missing'))\nif (sum(is.na(data.set[[gene]]))>0) stop(gettextf('Some gene names are missing'))\n\n############################\n#Pull out the subset of data that will be used\n############################\n#Pull out the data that we need from the bigger data file\ndatTemp<-data.frame(pvalTemp=data.set[[pval]],geneTemp=as.character(data.set[[gene]]),snpTemp=as.character(data.set[[snp]]))\n\nfret<-datTemp[datTemp$geneTemp!=\"\",]\n\n#How many SNPs per gene?\ntab<-data.frame(table(datTemp$geneTemp))\nnames(tab)<-c(\"gene\",\"snpCount\")\n\n#Inverse normal transformation of the p-values after ranking\ndatTemp$probit.rank.transform<-qnorm((rank(datTemp$pvalTemp)-0.5)/length(datTemp$pvalTemp))\n\n#Run lmer function\nfm.rawg=lmer(probit.rank.transform ~ 1+(1|geneTemp),data=datTemp)\naa=ranef(fm.rawg,postVar=TRUE)\nbeta<-fixef(fm.rawg)\npost.est=aa$geneTemp[,1,]\n#post.var=attr(aa$gene.temp,\"postVar\")[1,1,]\nn.i<-as.vector(table(datTemp$geneTemp))\nsigma.sq.b<-VarCorr(fm.rawg)$geneTemp[1,1]\nsigma.sq<-(attr(VarCorr(fm.rawg),\"sc\"))^2\nlambda<-sigma.sq.b/(sigma.sq.b+sigma.sq/n.i)\n\nvar.out<-var.bi<-lambda*sigma.sq.b\n\n\n############################################################\n##Calculate the prediction interval\npred.upper<-post.est+sqrt(var.bi)*qnorm(1-alpha/(length(post.est)))##Bonferroni correction\n############################################################\n\n############################\n#Defining Output\n############################\nout<-data.frame(gene=as.character(rownames(aa$gene)),postEst=post.est,var=var.out,predUpper=as.numeric(as.character(pred.upper)))\nnames(out)[1]<-\"gene\"\nout<-merge(out,tab,by.x=\"gene\",by.y=\"gene\",all.x=TRUE)\n\ndata.set.g<-data.set[!duplicated(data.set[[gene]]),c(gene,chr,coord)]\nout<-merge(out,data.set.g,by.x=\"gene\",by.y=gene,all.x=TRUE)\nout[[coord]]<-as.numeric(as.character(out[[coord]]))\nout[[chr]]<-as.numeric(as.character(out[[chr]]))\n\n#Calculate the gene level p-value\nout$MixMAP_pvalue<-pnorm(out$postEst/sqrt(out$var))\nout$MixMAP_pvalue_adj<-p.adjust(out$MixMAP_pvalue,method=\"BH\")\n\n\ncutoff<-0\nnum<-c(\"number detected\"=sum(out$predUpper<cutoff),\"total number of genes\"=dim(out)[1])\ndetected<-out[out$predUpper<cutoff,]\n\n############################\n#If any genes detected\n############################\nif (num[1]>0){\ngenes.detect<-as.character(detected[[\"gene\"]])\nsnpTemp<-datTemp[datTemp$geneTemp%in%genes.detect,]\nsnpTemp$geneTemp<-as.character(snpTemp$geneTemp)\nsnpTemp$snpTemp<-as.character(snpTemp$snpTemp)\n\n#Pull out the min SNP \nsnp.tmp.list<-list()\nfor (g in unique(snpTemp$geneTemp)){\nminSNP<-snpTemp[snpTemp$geneTemp==g,]\nsnp.tmp.list[[g]]<-unlist(c(minSNP[min(minSNP$pvalTemp)==minSNP$pvalTemp,][1,-1],summary(minSNP$pvalTemp)))\n}\n\nsnp.min<-data.frame(do.call(rbind,snp.tmp.list))\nnames(snp.min)<-c(\"gene\",\"minSNP\",\"probit.rank.transform\",\"pval.min\",\"pval.Q1\",\"pval.median\",\"pval.mean\",\"pval.Q3\",\"pval.max\")\nsnp.min[[\"gene\"]]<-as.character(snp.min[[\"gene\"]])\nsnp.min$minSNP<-as.character(snp.min$minSNP)\nsnp.min$probit.rank.transform<-as.numeric(as.character(snp.min$probit.rank.transform))\nsnp.min$pval.min<-as.numeric(as.character(snp.min$pval.min))\nsnp.min$pval.Q1<-as.numeric(as.character(snp.min$pval.Q1))\nsnp.min$pval.median<-as.numeric(as.character(snp.min$pval.median))\nsnp.min$pval.mean<-as.numeric(as.character(snp.min$pval.mean))\nsnp.min$pval.Q3<-as.numeric(as.character(snp.min$pval.Q3))\nsnp.min$pval.max<-as.numeric(as.character(snp.min$pval.max))\n\n\n#merge on the min pvalue and SNP name\ndetected<-merge(detected,snp.min,by.x=\"gene\",by.y=\"gene\",all.x=TRUE)\n\n#merge in the chromosome and Coordinate\nnames(out)[c(1,6,7)]<-names(detected)[c(1,6,7)]<-c(\"gene\",\"chr\",\"coordinate\")\nout[[\"gene\"]]<-as.character(out[[\"gene\"]])\ndetected[[\"gene\"]]<-as.character(detected[[\"gene\"]])\n\n#detected.merg<-merge(detected,gene.location.file.num,by.x=\"gene\",by.y=\"external_gene_id\",all.x=TRUE)\nMixMAP.out<-new(\"MixMAP\",output=out,num.genes.detected=num,detected.genes=detected,lmer.out=fm.rawg)\n\n}\n############################\n#If no genes are detected\n############################\nif (num[1]==0) {MixMAP.out<-new(\"MixMAP\",output=out,num.genes.detected=num,detected.genes=detected,lmer.out=fm.rawg)}\n\n#return MixMAP object\nMixMAP.out\n}",
    "created" : 1373933418466.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3033364992",
    "id" : "50B63B60",
    "lastKnownWriteTime" : 1372724494,
    "path" : "~/Dropbox/MixMAP/R/MixMAP.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}